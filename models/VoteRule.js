const mongoose = require("mongoose")

const schema = new mongoose.Schema({
  voteId: { type: Schema.Types.ObjectId, ref: "Vote" },
  auth_open: { type: Number },
  bg_audio: { type: Number },
  bg_img: { type: Number },
  bg_img_attachment: { type: String },
  bg_img_size: { type: String },
  block_address: { type: Number },
  block_ip: { type: Number },
  block_level: { type: Number },
  block_max_day: { type: Number },
  block_max_hour: { type: Number },
  block_time: { type: Number },
  captcha: { type: Number },
  comment_open: { type: Number },
  display_copyright: { type: Number },
  display_navbar_self: { type: Number },
  follow_open: { type: Number },
  gift_open: { type: Number },
  live_open: { type: Number },
  open_vote_jump: { type: Number },
  output_vote_history_excel: { type: Number },
  output_vote_item_excel: { type: Number },
  page_ad_img: { type: Number },
  page_banner_auto: { type: Number },
  page_banner_effect: { type: Number },
  page_banner_pagination: { type: Number },
  page_banner_second: { type: Number },
  page_float: { type: Number },
  private_open: { type: Number },
  rule_everyday: { type: Number },
  rule_item_times: { type: Number },
  rule_max: { type: Number },
  rule_min: { type: Number },
  rule_times: { type: Number },
  rule_type: { type: Number },
  sign_form: { type: Number },
  sign_notice_wx: { type: Number },
  sign_open: { type: Number },
  sign_upload_count_max: { type: Number },
  sign_video_open: { type: Number },
  statistics_vote: { type: Number },
  statistics_vote_item: { type: Number },
  style_color: { type: Number },
  style_tpl: { type: Number },
  text_copyright: { type: Number },
  text_notice: { type: Number },
  text_vote_btn_name: { type: Number },
  text_vote_item_alias: { type: Number },
  text_vote_unit: { type: Number },
  vote_banner_count: { type: Number },
  vote_count: { type: Number },
  vote_item_count: { type: Number },
  vote_read_count: { type: Number },
  vote_succ_img: { type: Number },
})

module.exports = mongoose.model("VoteRule", schema)
